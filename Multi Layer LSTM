import numpy as np
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense

# Step 1: Prepare the dataset
def create_sequence(data, n_steps):
    X, y = [], []
    for i in range(len(data) - n_steps):
        X.append(data[i:i + n_steps])
        y.append(data[i + n_steps])
    return np.array(X), np.array(y)

# Generate sequence data
sequence = np.array([i for i in range(1, 51)])  # e.g., [1 to 50]
n_steps = 5

X, y = create_sequence(sequence, n_steps)
X = X.reshape((X.shape[0], X.shape[1], 1))

# Step 2: Define a Multilayer LSTM model
model = Sequential()
model.add(LSTM(100, activation='relu', return_sequences=True, input_shape=(n_steps, 1)))  # First LSTM
model.add(LSTM(50, activation='relu'))                                                    # Second LSTM
model.add(Dense(1))                                                                        # Output layer

model.compile(optimizer='adam', loss='mse')

# Step 3: Train the model
model.fit(X, y, epochs=300, verbose=0)

# Step 4: Make a prediction
test_input = np.array([46, 47, 48, 49, 50])
test_input = test_input.reshape((1, n_steps, 1))
predicted = model.predict(test_input, verbose=0)
print("Next number prediction:", predicted[0][0])
